name: CI/CD Pipeline for Python Package with SonarCloud and Metrics Annotation

on:
  push:
    tags:
      - "v*"  # Se ejecutar√° en cada nuevo tag que comience con "v"

jobs:
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    steps:
      # Configurar el repositorio
      - name: Checkout repository
        uses: actions/checkout@v3

      # Configurar Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      # Instalar dependencias para el an√°lisis
      - name: Install SonarCloud Scanner
        run: |
          python -m pip install --upgrade pip setuptools wheel
          npm install -g sonarqube-scanner

      # Ejecutar el an√°lisis de SonarCloud
      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.organization=${{ secrets.SONAR_ORG }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.python.coverage.reportPaths=coverage.xml \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      # Obtener m√©tricas de SonarCloud y generar anotaciones
      - name: Fetch SonarCloud Metrics
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -u $SONAR_TOKEN: \
            "${{ secrets.SONAR_HOST_URL }}/api/measures/component?component=${{ secrets.SONAR_PROJECT_KEY }}&metricKeys=security_rating,reliability_rating,maintainability_rating,coverage,duplicated_lines_density" \
            -o sonar_metrics.json

      - name: Create Metrics Table
        run: |
          metrics=$(cat sonar_metrics.json | jq '.component.measures')
          security=$(echo $metrics | jq -r '.[] | select(.metric=="security_rating") | .value')
          reliability=$(echo $metrics | jq -r '.[] | select(.metric=="reliability_rating") | .value')
          maintainability=$(echo $metrics | jq -r '.[] | select(.metric=="maintainability_rating") | .value')
          coverage=$(echo $metrics | jq -r '.[] | select(.metric=="coverage") | .value')
          duplication=$(echo $metrics | jq -r '.[] | select(.metric=="duplicated_lines_density") | .value')

          echo "## SonarCloud Metrics Table üö¶"
          echo "| Metric              | Value         | Rating      |"
          echo "|---------------------|---------------|-------------|"
          echo "| üõ°Ô∏è Security         | $security     | $(rating $security) |"
          echo "| ‚úÖ Reliability       | $reliability  | $(rating $reliability) |"
          echo "| üõ†Ô∏è Maintainability | $maintainability | $(rating $maintainability) |"
          echo "| üìà Coverage         | $coverage%    | $(coverage_rating $coverage) |"
          echo "| üîÅ Duplication     | $duplication% | $(duplication_rating $duplication) |"

          function rating() {
            case $1 in
              1) echo "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê" ;;
              2) echo "‚≠ê‚≠ê‚≠ê‚≠ê" ;;
              3) echo "‚≠ê‚≠ê‚≠ê" ;;
              4) echo "‚≠ê‚≠ê" ;;
              5) echo "‚≠ê" ;;
              *) echo "N/A" ;;
            esac
          }

          function coverage_rating() {
            if [ $1 -ge 80 ]; then
              echo "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"
            elif [ $1 -ge 60 ]; then
              echo "‚≠ê‚≠ê‚≠ê‚≠ê"
            elif [ $1 -ge 40 ]; then
              echo "‚≠ê‚≠ê‚≠ê"
            elif [ $1 -ge 20 ]; then
              echo "‚≠ê‚≠ê"
            else
              echo "‚≠ê"
            fi
          }

          function duplication_rating() {
            if [ $1 -le 5 ]; then
              echo "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"
            elif [ $1 -le 10 ]; then
              echo "‚≠ê‚≠ê‚≠ê‚≠ê"
            elif [ $1 -le 20 ]; then
              echo "‚≠ê‚≠ê‚≠ê"
            elif [ $1 -le 40 ]; then
              echo "‚≠ê‚≠ê"
            else
              echo "‚≠ê"
            fi
          }

  publish:
    name: Publish Python Package
    runs-on: ubuntu-latest
    needs: sonarcloud  # Se ejecuta despu√©s de completar la tarea de SonarCloud
    if: success()  # Solo si la tarea anterior fue exitosa
    steps:
      # Configurar el repositorio
      - name: Checkout repository
        uses: actions/checkout@v3

      # Configurar Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      # Instalar herramientas necesarias
      - name: Install Packaging Tools
        run: |
          python -m pip install --upgrade pip setuptools wheel twine
        # Agregar anotaci√≥n de √©xito despu√©s de instalar herramientas
      - name: Annotate Packaging Tools Installation
        run: echo "::notice title=Dependencies Installed üì¶::Packaging tools installed successfully (pip, setuptools, wheel, twine)."

      # Construir el paquete
      - name: Build Package
        run: |
          python setup.py sdist bdist_wheel
        # Agregar anotaci√≥n de √©xito despu√©s de construir el paquete
      - name: Annotate Package Build
        run: echo "::notice title=Package Build üöÄ::Package built successfully and is ready for upload."

      # Subir el paquete a PyPI
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload dist/*
        # Agregar anotaci√≥n de √©xito despu√©s de subir el paquete
      - name: Annotate Upload Success
        run: echo "::notice title=Upload Success üåü::The package has been successfully uploaded to PyPI."

      # Generar anotaciones con los detalles del lanzamiento
      - name: Create Release Annotation
        run: |
          echo "::notice title=Release Details üì¶::Package version ${GITHUB_REF_NAME} has been published to PyPI."
