name: Publish Python Package with SonarCloud

on:
  push:
    tags:
      - "v*" # El pipeline se ejecutará cuando se empuje un tag que comience con "v"

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
    # Configurar el repositorio
    - name: Checkout repository
      uses: actions/checkout@v3

    # Configurar Python
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
      run: echo "::notice title=Python Setup 🐍::Python 3.9 has been configured successfully."

    # Instalar dependencias necesarias
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov setuptools wheel twine
        echo "::notice title=Dependencies Installed 📦::Dependencies installed successfully (pip, pytest, pytest-cov, setuptools, wheel, twine)."

    # Ejecutar análisis en SonarCloud
    - name: SonarCloud Analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        sonar-scanner \
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.python.coverage.reportPaths=coverage-reports/coverage.xml \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

    # Extraer métricas de SonarCloud
    - name: Extract SonarCloud Metrics
      run: |
        curl -u "${{ secrets.SONAR_TOKEN }}:" "${{ secrets.SONAR_HOST_URL }}/api/measures/component?component=${{ secrets.SONAR_PROJECT_KEY }}&metricKeys=security_rating,reliability_rating,maintainability_rating,coverage,duplicated_lines_density" > sonar_metrics.json
        echo "::notice title=Metrics Extracted 📊::SonarCloud metrics have been successfully extracted."

    # Generar tabla de anotaciones para SonarCloud
    - name: Generate Annotations
      run: |
        python -c "
import json

# Leer el archivo de métricas
with open('sonar_metrics.json', 'r') as file:
    data = json.load(file)

# Extraer las métricas relevantes
metrics = {measure['metric']: measure['value'] for measure in data['component']['measures']}
security = metrics.get('security_rating', 'N/A')
reliability = metrics.get('reliability_rating', 'N/A')
maintainability = metrics.get('maintainability_rating', 'N/A')
coverage = metrics.get('coverage', 'N/A')
duplications = metrics.get('duplicated_lines_density', 'N/A')

# Generar una tabla en formato Markdown
table = f\"\"\"| Metric            | Rating | Value        |
|------------------|--------|--------------|
| Security         | 🟢 A   | {security}   |
| Reliability      | 🟢 A   | {reliability}|
| Maintainability  | 🟢 A   | {maintainability} |
| Coverage         | 🟢 A   | {coverage}%  |
| Duplications     | 🔴 E   | {duplications}%  |
\"\"\"

# Guardar la tabla en un archivo
with open('annotations.md', 'w') as output:
    output.write(table)

# Mostrar en GitHub Actions
print(f'::notice title=SonarCloud Metrics::\\n{table}')
"

    # Construir el paquete
    - name: Build Package
      run: |
        python setup.py sdist bdist_wheel
        echo "::notice title=Package Build 🚀::Package built successfully and is ready for upload."

    # Subir el paquete a PyPI
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        twine upload dist/*
        echo "::notice title=Upload Success ✅::The package has been successfully uploaded to PyPI."
