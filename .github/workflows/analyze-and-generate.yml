name: SonarQube and Publish with Annotations

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonar-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for SonarQube to analyze the full history

      # Install Java (required for SonarQube scanner)
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'

      # Run SonarQube Analysis
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Required for PR decoration
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Generate Annotations Summary
      - name: Generate Annotations Summary
        run: |
          # Parse SonarQube results for annotations
          if [ -f .scannerwork/report-task.sarif ]; then
            echo "### SonarQube Analysis Report" > annotations.md
            echo "| Issue Type | Severity | Description |" >> annotations.md
            echo "|------------|----------|-------------|" >> annotations.md
            grep -oP '"ruleId":.*?[^\\]",|"message":.*?[^\\]"' .scannerwork/report-task.sarif | \
            awk 'NR%2{printf "| `%s` ", substr($0, 11, length($0)-12); next} {printf "| %s |\n", substr($0, 12, length($0)-12)}' >> annotations.md
          else
            echo "SonarQube analysis did not produce a SARIF report."
          fi

      # Post annotations summary as a comment
      - name: Post Annotations to PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v3
        with:
          path: annotations.md

  publish-package:
    name: Publish Package
    needs: sonar-analysis # Only run if SonarQube analysis completes
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Setup Python for package creation
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Install dependencies
      - name: Install Dependencies
        run: |
          pip install --upgrade setuptools wheel twine

      # Build the package
      - name: Build Package
        run: |
          python setup.py sdist bdist_wheel

      # Publish the package
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload dist/*
