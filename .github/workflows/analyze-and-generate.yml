name: SonarCloud and Publish with Annotations

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  sonarcloud-analysis:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required for SonarCloud to analyze the full history

      # Run SonarCloud Analysis
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=jeanvalverde24
            -Dsonar.projectKey=JeanValverde24_SI-8811-Pruebas_QA_U2_VALVERDE_CANO
            -Dsonar.python.coverage.reportPaths=coverage.xml

      # Generate Annotations Summary
      - name: Generate Annotations Summary
        run: |
          # Parse SonarCloud results for annotations
          if [ -f .scannerwork/report-task.sarif ]; then
            echo "### SonarCloud Analysis Report" > annotations.md
            echo "| Issue Type | Severity | Description |" >> annotations.md
            echo "|------------|----------|-------------|" >> annotations.md
            grep -oP '"ruleId":.*?[^\\]",|"message":.*?[^\\]"' .scannerwork/report-task.sarif | \
            awk 'NR%2{printf "| `%s` ", substr($0, 11, length($0)-12); next} {printf "| %s |\n", substr($0, 12, length($0)-12)}' >> annotations.md
          else
            echo "SonarCloud analysis did not produce a SARIF report."
          fi

      # Post annotations summary as a comment
      - name: Post Annotations to PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: annotations.md

  publish-package:
    name: Publish Package
    needs: sonarcloud-analysis # Only run if SonarCloud analysis completes
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Setup Python for package creation
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Install dependencies
      - name: Install Dependencies
        run: |
          pip install --upgrade setuptools wheel twine

      # Build the package
      - name: Build Package
        run: |
          python setup.py sdist bdist_wheel

      # Publish the package
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*
